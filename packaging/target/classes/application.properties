info.app.name=EyeSky BackEnd
info.app.description=EyeSky est une plateforme qui permet aux entreprises souhaitant collaborer avec un pilote/videaste de trouver le pilote/Videaste qui leur convient. 
info.app.version=1.0-SNAPSHOT

server.port=8080
####################################
# Database configuration props
#spring.datasource.url=jdbc:mysql://localhost:3306/demo?createDatabaseIfNotExist=true
#spring.datasource.username=root
#spring.datasource.password=secret
#spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver

# Hibernate props
#spring.jpa.show-sql=true
#spring.jpa.hibernate.ddl-auto=none
#spring.jpa.hibernate.ddl-auto=create
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.MySQL5InnoDBDialect

# Social login provider props
#spring.security.oauth2.client.registration.google.clientId=928599174141-f1ndt0u2ipsugr747m49udsjegvuqjfl.apps.googleusercontent.com
#spring.security.oauth2.client.registration.google.clientSecret=iyfAu-1v_aLc4Db-U7rMIIqg
#spring.security.oauth2.client.registration.facebook.clientId=1069639997282650
#spring.security.oauth2.client.registration.facebook.clientSecret=7ddb7d06b3a1b44b72c989b2e4dcb6c2
#spring.security.oauth2.client.provider.facebook.user-info-uri=https://graph.facebook.com/me?fields=id,name,email,picture
#spring.security.oauth2.client.registration.github.clientId=<your-client-id>
#spring.security.oauth2.client.registration.github.clientSecret=<your-client-secret>
#spring.security.oauth2.client.registration.linkedin.clientId=<your-client-id>
#spring.security.oauth2.client.registration.linkedin.clientSecret=<your-client-secret>
#spring.security.oauth2.client.registration.linkedin.client-authentication-method=post
#spring.security.oauth2.client.registration.linkedin.authorization-grant-type=authorization_code
#spring.security.oauth2.client.registration.linkedin.scope=r_liteprofile, r_emailaddress
#spring.security.oauth2.client.registration.linkedin.redirect-uri={baseUrl}/login/oauth2/code/{registrationId}
#spring.security.oauth2.client.registration.linkedin.client-name=Linkedin
#spring.security.oauth2.client.registration.linkedin.provider=linkedin
#spring.security.oauth2.client.provider.linkedin.authorization-uri=https://www.linkedin.com/oauth/v2/authorization
#spring.security.oauth2.client.provider.linkedin.token-uri=https://www.linkedin.com/oauth/v2/accessToken
#spring.security.oauth2.client.provider.linkedin.user-info-uri=https://api.linkedin.com/v2/me
#spring.security.oauth2.client.provider.linkedin.user-name-attribute=id
#linkedin.email-address-uri=https://api.linkedin.com/v2/emailAddress?q=members&projection=(elements*(handle~))
#
#app.auth.tokenSecret=926D96C90030DD58429D2751AC1BDBBC
#app.auth.tokenExpirationMsec=864000000
# After successfully authenticating with the OAuth2 Provider,
# we'll be generating an auth token for the user and sending the token to the
# redirectUri mentioned by the frontend client in the /oauth2/authorization request.
# We're not using cookies because they won't work well in mobile clients.
#app.oauth2.authorizedRedirectUris=http://localhost:8081/oauth2/redirect,myandroidapp://oauth2/redirect,myiosapp://oauth2/redirect

logging.level.org.springframework=TRACE
#logging.level.org.hibernate.SQL=TRACE
#logging.level.org.hibernate.type=TRACE


spring.profiles.active=h2

#
#spring.security.user.name=hze
#spring.security.user.password=password
#security.ignored=/**
#spring.security.enabled=false
#management.security.enabled=false
#security.basic.enabled=false

eyesky.app.jwtSecret= bezKoderSecretKey
eyesky.app.jwtExpirationMs= 86400000
